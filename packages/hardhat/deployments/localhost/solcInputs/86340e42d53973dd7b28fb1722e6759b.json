{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/utils/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\n * consider using {ReentrancyGuardTransient} instead.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"
    },
    "contracts/GigPeek.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\n\n/**\n * @title GigPeek\n * @dev A decentralized platform for gig economy transactions with escrow and proof-of-work verification\n */\ncontract GigPeek is ReentrancyGuard {\n    \n    enum DealStatus {\n        Active,         // 0 - Deal created, funds escrowed\n        ProofSubmitted, // 1 - Contractor has submitted proof\n        Completed       // 2 - Client has released funds\n    }\n    \n    struct Deal {\n        address client;\n        address contractor;\n        uint256 amount;\n        string workDescription;\n        bytes32 proofHash;          // keccak256 hash of the work preview\n        DealStatus status;\n        uint256 createdAt;\n        uint256 proofSubmittedAt;\n    }\n    \n    // State Variables\n    Deal[] public deals;\n    mapping(address => uint256[]) public clientDeals;\n    mapping(address => uint256[]) public contractorDeals;\n    \n    // Events\n    event DealCreated(\n        uint256 indexed dealId,\n        address indexed client,\n        address indexed contractor,\n        uint256 amount,\n        string workDescription\n    );\n    \n    event ProofSubmitted(\n        uint256 indexed dealId,\n        address indexed contractor,\n        bytes32 proofHash\n    );\n    \n    event PaymentReleased(\n        uint256 indexed dealId,\n        address indexed contractor,\n        uint256 amount\n    );\n    \n    // Modifiers\n    modifier dealExists(uint256 _dealId) {\n        require(_dealId < deals.length, \"Deal does not exist\");\n        _;\n    }\n    \n    modifier onlyClient(uint256 _dealId) {\n        require(msg.sender == deals[_dealId].client, \"Only client can perform this action\");\n        _;\n    }\n    \n    modifier onlyContractor(uint256 _dealId) {\n        require(msg.sender == deals[_dealId].contractor, \"Only contractor can perform this action\");\n        _;\n    }\n    \n    /**\n     * @dev Creates a new deal with escrow\n     * @param _contractor The Ethereum address of the contractor\n     * @param _workDescription A clear description of the work to be done\n     */\n    function createDeal(\n        address _contractor,\n        string calldata _workDescription\n    ) external payable {\n        require(msg.value > 0, \"Deal amount must be greater than 0\");\n        require(_contractor != address(0), \"Invalid contractor address\");\n        require(_contractor != msg.sender, \"Client and contractor cannot be the same\");\n        require(bytes(_workDescription).length > 0, \"Work description cannot be empty\");\n        \n        uint256 dealId = deals.length;\n        \n        Deal memory newDeal = Deal({\n            client: msg.sender,\n            contractor: _contractor,\n            amount: msg.value,\n            workDescription: _workDescription,\n            proofHash: bytes32(0),\n            status: DealStatus.Active,\n            createdAt: block.timestamp,\n            proofSubmittedAt: 0\n        });\n        \n        deals.push(newDeal);\n        clientDeals[msg.sender].push(dealId);\n        contractorDeals[_contractor].push(dealId);\n        \n        emit DealCreated(dealId, msg.sender, _contractor, msg.value, _workDescription);\n    }\n    \n    /**\n     * @dev Allows contractor to submit proof of work\n     * @param _dealId The ID of the deal to submit proof for\n     * @param _proofHash The keccak256 hash of the work preview\n     */\n    function submitProof(\n        uint256 _dealId,\n        bytes32 _proofHash\n    ) external dealExists(_dealId) onlyContractor(_dealId) {\n        require(deals[_dealId].status == DealStatus.Active, \"Deal is not active\");\n        require(_proofHash != bytes32(0), \"Proof hash cannot be empty\");\n        \n        deals[_dealId].proofHash = _proofHash;\n        deals[_dealId].status = DealStatus.ProofSubmitted;\n        deals[_dealId].proofSubmittedAt = block.timestamp;\n        \n        emit ProofSubmitted(_dealId, msg.sender, _proofHash);\n    }\n    \n    /**\n     * @dev Allows client to release payment to contractor\n     * @param _dealId The ID of the deal to release payment for\n     */\n    function releasePayment(\n        uint256 _dealId\n    ) external dealExists(_dealId) onlyClient(_dealId) nonReentrant {\n        require(deals[_dealId].status == DealStatus.ProofSubmitted, \"Proof not submitted yet\");\n        \n        Deal storage deal = deals[_dealId];\n        deal.status = DealStatus.Completed;\n        \n        uint256 amount = deal.amount;\n        address contractor = deal.contractor;\n        \n        // Transfer ETH to contractor\n        (bool success, ) = contractor.call{value: amount}(\"\");\n        require(success, \"Payment transfer failed\");\n        \n        emit PaymentReleased(_dealId, contractor, amount);\n    }\n    \n    // View Functions\n    \n    /**\n     * @dev Returns an array of deal IDs where the specified address is the client\n     * @param _client The client address to query\n     * @return Array of deal IDs\n     */\n    function getDealsByClient(address _client) external view returns (uint256[] memory) {\n        return clientDeals[_client];\n    }\n    \n    /**\n     * @dev Returns an array of deal IDs where the specified address is the contractor\n     * @param _contractor The contractor address to query\n     * @return Array of deal IDs\n     */\n    function getDealsByContractor(address _contractor) external view returns (uint256[] memory) {\n        return contractorDeals[_contractor];\n    }\n    \n    /**\n     * @dev Returns the full Deal struct for a given deal ID\n     * @param _dealId The deal ID to query\n     * @return The Deal struct\n     */\n    function getDeal(uint256 _dealId) external view dealExists(_dealId) returns (Deal memory) {\n        return deals[_dealId];\n    }\n    \n    /**\n     * @dev Returns the total number of deals created\n     * @return Total number of deals\n     */\n    function getTotalDeals() external view returns (uint256) {\n        return deals.length;\n    }\n    \n    /**\n     * @dev Returns contract balance (for testing purposes)\n     * @return Contract balance in wei\n     */\n    function getContractBalance() external view returns (uint256) {\n        return address(this).balance;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}