/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace GigPeek {
  export type DealStruct = {
    client: AddressLike;
    contractor: AddressLike;
    amount: BigNumberish;
    workDescription: string;
    proofHash: BytesLike;
    status: BigNumberish;
    createdAt: BigNumberish;
    proofSubmittedAt: BigNumberish;
  };

  export type DealStructOutput = [
    client: string,
    contractor: string,
    amount: bigint,
    workDescription: string,
    proofHash: string,
    status: bigint,
    createdAt: bigint,
    proofSubmittedAt: bigint
  ] & {
    client: string;
    contractor: string;
    amount: bigint;
    workDescription: string;
    proofHash: string;
    status: bigint;
    createdAt: bigint;
    proofSubmittedAt: bigint;
  };
}

export interface GigPeekInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "clientDeals"
      | "contractorDeals"
      | "createDeal"
      | "deals"
      | "getContractBalance"
      | "getDeal"
      | "getDealsByClient"
      | "getDealsByContractor"
      | "getTotalDeals"
      | "releasePayment"
      | "submitProof"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "DealCreated" | "PaymentReleased" | "ProofSubmitted"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "clientDeals",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "contractorDeals",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createDeal",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(functionFragment: "deals", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "getContractBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDeal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDealsByClient",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getDealsByContractor",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalDeals",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "releasePayment",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "submitProof",
    values: [BigNumberish, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "clientDeals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractorDeals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createDeal", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getContractBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getDeal", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDealsByClient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDealsByContractor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalDeals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "releasePayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitProof",
    data: BytesLike
  ): Result;
}

export namespace DealCreatedEvent {
  export type InputTuple = [
    dealId: BigNumberish,
    client: AddressLike,
    contractor: AddressLike,
    amount: BigNumberish,
    workDescription: string
  ];
  export type OutputTuple = [
    dealId: bigint,
    client: string,
    contractor: string,
    amount: bigint,
    workDescription: string
  ];
  export interface OutputObject {
    dealId: bigint;
    client: string;
    contractor: string;
    amount: bigint;
    workDescription: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PaymentReleasedEvent {
  export type InputTuple = [
    dealId: BigNumberish,
    contractor: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    dealId: bigint,
    contractor: string,
    amount: bigint
  ];
  export interface OutputObject {
    dealId: bigint;
    contractor: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProofSubmittedEvent {
  export type InputTuple = [
    dealId: BigNumberish,
    contractor: AddressLike,
    proofHash: BytesLike
  ];
  export type OutputTuple = [
    dealId: bigint,
    contractor: string,
    proofHash: string
  ];
  export interface OutputObject {
    dealId: bigint;
    contractor: string;
    proofHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface GigPeek extends BaseContract {
  connect(runner?: ContractRunner | null): GigPeek;
  waitForDeployment(): Promise<this>;

  interface: GigPeekInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  clientDeals: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  contractorDeals: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  createDeal: TypedContractMethod<
    [_contractor: AddressLike, _workDescription: string],
    [void],
    "payable"
  >;

  deals: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, string, string, bigint, bigint, bigint] & {
        client: string;
        contractor: string;
        amount: bigint;
        workDescription: string;
        proofHash: string;
        status: bigint;
        createdAt: bigint;
        proofSubmittedAt: bigint;
      }
    ],
    "view"
  >;

  getContractBalance: TypedContractMethod<[], [bigint], "view">;

  getDeal: TypedContractMethod<
    [_dealId: BigNumberish],
    [GigPeek.DealStructOutput],
    "view"
  >;

  getDealsByClient: TypedContractMethod<
    [_client: AddressLike],
    [bigint[]],
    "view"
  >;

  getDealsByContractor: TypedContractMethod<
    [_contractor: AddressLike],
    [bigint[]],
    "view"
  >;

  getTotalDeals: TypedContractMethod<[], [bigint], "view">;

  releasePayment: TypedContractMethod<
    [_dealId: BigNumberish],
    [void],
    "nonpayable"
  >;

  submitProof: TypedContractMethod<
    [_dealId: BigNumberish, _proofHash: BytesLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "clientDeals"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "contractorDeals"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "createDeal"
  ): TypedContractMethod<
    [_contractor: AddressLike, _workDescription: string],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "deals"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, string, string, bigint, bigint, bigint] & {
        client: string;
        contractor: string;
        amount: bigint;
        workDescription: string;
        proofHash: string;
        status: bigint;
        createdAt: bigint;
        proofSubmittedAt: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getContractBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getDeal"
  ): TypedContractMethod<
    [_dealId: BigNumberish],
    [GigPeek.DealStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getDealsByClient"
  ): TypedContractMethod<[_client: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getDealsByContractor"
  ): TypedContractMethod<[_contractor: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getTotalDeals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "releasePayment"
  ): TypedContractMethod<[_dealId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "submitProof"
  ): TypedContractMethod<
    [_dealId: BigNumberish, _proofHash: BytesLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "DealCreated"
  ): TypedContractEvent<
    DealCreatedEvent.InputTuple,
    DealCreatedEvent.OutputTuple,
    DealCreatedEvent.OutputObject
  >;
  getEvent(
    key: "PaymentReleased"
  ): TypedContractEvent<
    PaymentReleasedEvent.InputTuple,
    PaymentReleasedEvent.OutputTuple,
    PaymentReleasedEvent.OutputObject
  >;
  getEvent(
    key: "ProofSubmitted"
  ): TypedContractEvent<
    ProofSubmittedEvent.InputTuple,
    ProofSubmittedEvent.OutputTuple,
    ProofSubmittedEvent.OutputObject
  >;

  filters: {
    "DealCreated(uint256,address,address,uint256,string)": TypedContractEvent<
      DealCreatedEvent.InputTuple,
      DealCreatedEvent.OutputTuple,
      DealCreatedEvent.OutputObject
    >;
    DealCreated: TypedContractEvent<
      DealCreatedEvent.InputTuple,
      DealCreatedEvent.OutputTuple,
      DealCreatedEvent.OutputObject
    >;

    "PaymentReleased(uint256,address,uint256)": TypedContractEvent<
      PaymentReleasedEvent.InputTuple,
      PaymentReleasedEvent.OutputTuple,
      PaymentReleasedEvent.OutputObject
    >;
    PaymentReleased: TypedContractEvent<
      PaymentReleasedEvent.InputTuple,
      PaymentReleasedEvent.OutputTuple,
      PaymentReleasedEvent.OutputObject
    >;

    "ProofSubmitted(uint256,address,bytes32)": TypedContractEvent<
      ProofSubmittedEvent.InputTuple,
      ProofSubmittedEvent.OutputTuple,
      ProofSubmittedEvent.OutputObject
    >;
    ProofSubmitted: TypedContractEvent<
      ProofSubmittedEvent.InputTuple,
      ProofSubmittedEvent.OutputTuple,
      ProofSubmittedEvent.OutputObject
    >;
  };
}
